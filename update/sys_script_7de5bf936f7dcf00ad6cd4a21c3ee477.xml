<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_label/>
        <action_name/>
        <action_query>false</action_query>
        <action_run_at>server</action_run_at>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <application/>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_casus_reservatio_reservation</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_casus_reservatio_reservation">active=true^customerISNOTEMPTY^EQ<item endquery="false" field="active" goto="false" newquery="false" operator="=" or="false" value="true"/>
            <item endquery="false" field="customer" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Reservation Case Create / Update Rules</name>
        <onclick/>
        <order>100</order>
        <priority>100</priority>
        <read_access_action>false</read_access_action>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	/* This business rule handles how and when cases are created from reservations.
	
	*/
	
	//var caseTst;
	var user = current.customer;
	var userGroups = user.u_member_of;
	var currentCase = new GlideRecord('x_casus_csm_case');

	if(user == '') {
		return;

	} else {
		
		//only perform case-related actions if the user is a faculty or staff
		if(userGroups.indexOf("univ-staff-all") > -1 || userGroups.indexOf("univ-faculty-all") > -1 || userGroups.indexOf("csus-faculty-everyone") > -1 || userGroups.indexOf("csus-staff-everyone") > -1) {
			//determine if a case exists for this person, if not, return val will be -1

			currentCase.addActiveQuery();
			currentCase.addQuery('client', user);
			currentCase.setLimit(1);
			currentCase.query();

			if(currentCase.next()) { 

				currentCase.reservation_notes = current.number + " has been added to this case";
				currentCase.update();

			} else { 
				
				currentCase.initialize();
				currentCase.client = user;
				currentCase.assignment_group = gs.getProperty('x_casus_csm.atc_team');
				currentCase.insert();

			}
			
			current.setValue('case', currentCase.getValue('sys_id'));
			current.update();
			
		}
	}
			
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>nicholasmyers</sys_created_by>
        <sys_created_on>2017-10-19 22:18:48</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>7de5bf936f7dcf00ad6cd4a21c3ee477</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>Reservation Case Create / Update Rules</sys_name>
        <sys_overrides/>
        <sys_package display_value="Case Management" source="x_casus_csm">c62dcf2f0f43760012e4348ce1050e5f</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Case Management">c62dcf2f0f43760012e4348ce1050e5f</sys_scope>
        <sys_update_name>sys_script_7de5bf936f7dcf00ad6cd4a21c3ee477</sys_update_name>
        <sys_updated_by>nicholasmyers</sys_updated_by>
        <sys_updated_on>2017-10-27 21:28:09</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
</record_update>
