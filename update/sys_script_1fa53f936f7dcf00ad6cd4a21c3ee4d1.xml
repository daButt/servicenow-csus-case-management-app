<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_label/>
        <action_name/>
        <action_query>false</action_query>
        <action_run_at>server</action_run_at>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <application/>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sc_req_item</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="sc_req_item">active=true^EQ<item endquery="false" field="active" goto="false" newquery="false" operator="=" or="false" value="true"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Req Item Case Create / Update Rule</name>
        <onclick/>
        <order>300</order>
        <priority>100</priority>
        <read_access_action>false</read_access_action>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	/* This business rule handles how and when cases are created from incidents.
	
	*/
	var groupMap, currGroup, user, userGroups, userChanged;
	
	
	//since requested items set their assignment group via business rule after initial submission (based on the Item's fulfillment group) check the fulfillment group on insert, and the assignment group on update
	if(current.operation() == 'insert') {
		
		currGroup = current.cat_item.group;
		
	} else if(current.operation() == 'update' && current.assignment_group.changes()) {
		
		currGroup = current.assignment_group;
	}
	
	if(currGroup != '' && currGroup.u_manages_cases) {
		
		if(current.variables.requester == '') {
			user = current.request.requested_for;
		} else {
			user = current.variables.requester;
		}
		
		groupMap = findGroupMap(currGroup);
		
		userGroups = user.u_member_of;
		
		if(user == '') {
			return;

		} else {
			if(current.u_case == '') {

				//only perform case-related actions if the user is a faculty or staff
				if(userGroups.indexOf("univ-staff-all") > -1 || userGroups.indexOf("univ-faculty-all") > -1 || userGroups.indexOf("csus-faculty-everyone") > -1 || userGroups.indexOf("csus-staff-everyone") > -1) {

					//determine if a case exists for this person, if not, return val will be -1
					var currentCase = new GlideRecord('x_casus_csm_case');
					currentCase.addActiveQuery();
					currentCase.addQuery('assignment_group', groupMap);
					currentCase.addQuery('client', user);
					currentCase.setLimit(1);
					currentCase.query();

					if(currentCase.next()) { 

						currentCase.ritm_notes = current.number + " has been added to this case";
						currentCase.update();


					} else { 

						currentCase.initialize();
						currentCase.client = user;
						currentCase.assignment_group = groupMap;
						currentCase.ritm_notes = current.number + " has been added to this case";
						currentCase.insert();

					}

					current.setValue('u_case', currentCase.getValue('sys_id'));
					//current.work_notes = "This request has been added to " + currentCase.number;
					current.update();

				}
			}
		}
			
	} else { //the assignment group doesn't manage cases
			
		//if it has a case, it can be removed from the case
		if(current.u_case != '') {
				
			var caseGr = new GlideRecord('x_casus_csm_case');
			//update the case with worknotes
			caseGr.get(current.u_case);
			caseGr.ritm_notes = current.number + " has been removed from this case.";
			caseGr.update(); 
				
			//current.work_notes = "This request was removed from " + current.u_case.number;
			current.u_case = '';
			current.update();
		}	
	}
	
	
	//searches the assignment group to Case Team map table to determine which team to send the case to
	//defaults to the task assignment group if no mapping is found 
	function findGroupMap(groupID) {
		
		var groupMapGr = new GlideRecord('x_casus_csm_case_team_map');
		groupMapGr.addQuery('record_assignment_group', groupID);
		groupMapGr.setLimit(1);
		groupMapGr.query();
		
		if(groupMapGr.next()) {
			return groupMapGr.case_team;
		} else {
			
			return groupID;
		}
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>nicholasmyers</sys_created_by>
        <sys_created_on>2017-10-19 22:17:42</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>1fa53f936f7dcf00ad6cd4a21c3ee4d1</sys_id>
        <sys_mod_count>27</sys_mod_count>
        <sys_name>Req Item Case Create / Update Rule</sys_name>
        <sys_overrides/>
        <sys_package display_value="Case Management" source="x_casus_csm">c62dcf2f0f43760012e4348ce1050e5f</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Case Management">c62dcf2f0f43760012e4348ce1050e5f</sys_scope>
        <sys_update_name>sys_script_1fa53f936f7dcf00ad6cd4a21c3ee4d1</sys_update_name>
        <sys_updated_by>nicholasmyers</sys_updated_by>
        <sys_updated_on>2017-10-27 21:27:59</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
</record_update>
